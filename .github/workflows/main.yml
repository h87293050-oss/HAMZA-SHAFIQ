name: RDP with Public IP Fallback

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Get Public IP
        id: ip
        run: |
          $publicIP = (Invoke-RestMethod -Uri "https://api.ipify.org").Trim()
          echo "PUBLIC_IP=$publicIP" >> $env:GITHUB_ENV
          Write-Host "Public IP: $publicIP"

      - name: Configure RDP Settings
        run: |
          # Enable RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          
          # Open firewall for RDP
          netsh advfirewall firewall add rule name="Open RDP Port" dir=in action=allow protocol=TCP localport=3389

      - name: Create User with Fixed Credentials
        run: |
          $username = "RDPUser"
          $password = "Password123!"
          
          # Create user
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -ErrorAction SilentlyContinue
          Set-LocalUser -Name $username -Password $securePass
          
          Add-LocalGroupMember -Group "Administrators" -Member $username
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
          
          echo "RDP_CREDS=User: $username | Password: $password" >> $env:GITHUB_ENV
          echo "RDP_USERNAME=$username" >> $env:GITHUB_ENV
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV

      - name: Display Connection Info
        run: |
          Write-Host "=============================================="
          Write-Host "IMMEDIATE RDP ACCESS"
          Write-Host "=============================================="
          Write-Host "IP Address: $env:PUBLIC_IP"
          Write-Host "Username: $env:RDP_USERNAME"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host ""
          Write-Host "Note: This uses public IP - be cautious!"
          Write-Host "=============================================="

      - name: Keep Alive
        run: |
          # Keep running for 6 hours
          Write-Host "RDP is now accessible at $env:PUBLIC_IP"
          Write-Host "Press Ctrl+C in GitHub to stop this workflow"
          Start-Sleep -Seconds 21600          
          # Store credentials securely
          echo "RDP_CREDS=User: $username | Password: $password" >> $env:GITHUB_ENV
          echo "RDP_USERNAME=$username" >> $env:GITHUB_ENV
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        if: env.TS_ALREADY_RUNNING != 'true'
        run: |
          if (-not (Test-Path "$env:ProgramFiles\Tailscale\tailscale.exe")) {
            Write-Host "Installing Tailscale..."
            $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
            $installerPath = "$env:TEMP\tailscale.msi"
            Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
            Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
            Remove-Item $installerPath -Force
            Write-Host "Tailscale installed successfully"
          } else {
            Write-Host "Tailscale already installed"
          }

      - name: Establish Persistent Tailscale Connection
        run: |
          if ($env:TS_ALREADY_RUNNING -eq 'true') {
            Write-Host "Tailscale already running with IP: $env:EXISTING_IP"
            echo "TAILSCALE_IP=$env:EXISTING_IP" >> $env:GITHUB_ENV
          } else {
            Write-Host "Setting up Tailscale with persistent hostname: $env:PERSISTENT_HOSTNAME"
            
            # Use --reset to ensure clean connection
            & "$env:ProgramFiles\Tailscale\tailscale.exe" up `
              --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} `
              --hostname=$env:PERSISTENT_HOSTNAME `
              --accept-routes=true `
              --reset
            
            # Wait for IP assignment
            $tsIP = $null
            $retries = 0
            while (-not $tsIP -and $retries -lt 20) {
                Start-Sleep -Seconds 3
                $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
                $retries++
                Write-Host "Attempt $retries/20 - Waiting for Tailscale IP..."
            }
            
            if (-not $tsIP) {
                Write-Error "Tailscale IP not assigned after 20 attempts"
                exit 1
            }
            
            echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
            Write-Host "Tailscale connected successfully with IP: $tsIP"
            
            # Also get the MagicDNS name for persistent access
            $magicDNS = & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json | ConvertFrom-Json | Select-Object -ExpandProperty MagicDNSSuffix
            echo "TAILSCALE_HOSTNAME=$env:PERSISTENT_HOSTNAME.$magicDNS" >> $env:GITHUB_ENV
          }

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Testing RDP connectivity to: $env:TAILSCALE_IP"
          
          # Test multiple times to ensure connection is ready
          $maxAttempts = 10
          $attempt = 1
          $connected = $false
          
          while (-not $connected -and $attempt -le $maxAttempts) {
              Write-Host "Connection test attempt $attempt/$maxAttempts"
              $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -WarningAction SilentlyContinue -InformationLevel Quiet
              
              if ($testResult) {
                  $connected = $true
                  Write-Host "RDP connectivity successful!"
              } else {
                  Start-Sleep -Seconds 10
                  $attempt++
              }
          }
          
          if (-not $connected) {
              Write-Warning "RDP connection test failed, but continuing anyway..."
          }

      - name: Display Connection Information
        run: |
          Write-Host "`n=============================================="
          Write-Host "PERSISTENT RDP ACCESS - SAME USERNAME"
          Write-Host "=============================================="
          Write-Host "IP Address: $env:TAILSCALE_IP"
          Write-Host "Hostname: $env:TAILSCALE_HOSTNAME"
          Write-Host "Username: $env:RDP_USERNAME"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host ""
          Write-Host "This connection will:"
          Write-Host "- Auto-restart every 5 hours"
          Write-Host "- Maintain same username: $env:RDP_USERNAME"
          Write-Host "- Use persistent Tailscale hostname"
          Write-Host "=============================================="
          Write-Host "`n"

      - name: Maintain Persistent Connection
        run: |
          # Calculate end time (5 hours from now)
          $endTime = (Get-Date).AddHours(5)
          Write-Host "Session will run until: $($endTime.ToString('yyyy-MM-dd HH:mm:ss'))"
          Write-Host "Time remaining: 5 hours"
          
          # Keep alive loop with periodic status updates
          $checkInterval = 300  # 5 minutes
          $lastIPCheck = Get-Date
          
          while ((Get-Date) -lt $endTime) {
              $timeRemaining = $endTime - (Get-Date)
              Write-Host "[$(Get-Date)] RDP Active - Time remaining: $($timeRemaining.ToString('hh\:mm\:ss'))"
              
              # Periodically verify Tailscale connection
              if (((Get-Date) - $lastIPCheck).TotalMinutes -ge 10) {
                  $currentIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
                  if ($currentIP -ne $env:TAILSCALE_IP) {
                      Write-Host "IP changed from $env:TAILSCALE_IP to $currentIP"
                      echo "TAILSCALE_IP=$currentIP" >> $env:GITHUB_ENV
                  }
                  $lastIPCheck = Get-Date
              }
              
              # Sleep until next check
              Start-Sleep -Seconds $checkInterval
          }
          
          Write-Host "5-hour session completed. Workflow will auto-restart."

  # Notification step (optional)
  restart-notification:
    needs: secure-rdp
    runs-on: ubuntu-latest
    steps:
      - name: Notify Restart
        run: |
          echo "RDP session completed successfully"
          echo "Next auto-restart will occur in approximately 30 minutes"
